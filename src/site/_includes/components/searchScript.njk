<script src="https://cdn.jsdelivr.net/npm/flexsearch@0.7.21/dist/flexsearch.bundle.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', init, false);
    document.addEventListener('DOMContentLoaded', setCorrectShortcut, false);

    window.toggleSearch = function () {
        const searchEl = document.getElementById('globalsearch');
        if (searchEl.classList.contains('active')) {
            searchEl.classList.remove('active');
        } else {
            searchEl.classList.add('active');
            document.getElementById('term').focus();
        }
    }

    window.toggleTagSearch = function (element) { // Fixed parameter name
        const term = element?.textContent?.trim(); // Safely get textContent
        if (term) {
            const input = document.getElementById('term');
            input.value = term.startsWith('#') ? term.slice(1) : term;
            window.toggleSearch();
            window.search();
        }
    }

    // Loading SVG remains same

    function debounce(func, wait, immediate) {
        let timeout;
        return function () {
            const context = this, args = arguments;
            const later = function () {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            const callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    }

    function setCorrectShortcut() {
        if (navigator.platform.toUpperCase().includes('MAC')) {
            document.querySelectorAll(".search-keys").forEach(x => x.textContent = "âŒ˜ + K");
        }
    }

    function createIndex(posts) {
        const encoder = str => str.toLowerCase().split(/([^a-z]|[^\x00-\x7F])/);
        return new FlexSearch.Document({
            cache: true,
            charset: "latin:extra",
            optimize: true,
            document: {
                id: "id",
                index: [
                    { field: "content", tokenize: "reverse", encode: encoder },
                    { field: "title", tokenize: "forward", encode: encoder },
                    { field: "tags", tokenize: "forward", encode: encoder }
                ]
            }
        });
    }

    async function init() {
        let field, resultsDiv; // Proper variable declaration
        
        try {
            const searchIndexDate = '{{meta.buildDate|isoDate}}';
            let shouldFetch = true;
            
            const storedIndex = localStorage.getItem("searchIndex");
            if (storedIndex) {
                try { // Added try-catch for JSON parsing
                    const { date, docs } = JSON.parse(storedIndex);
                    if (date === searchIndexDate) {
                        shouldFetch = false;
                        window.docs = docs;
                        window.index = createIndex(docs);
                    }
                } catch (e) {
                    console.error('Error parsing search index:', e);
                    localStorage.removeItem("searchIndex");
                }
            }

            if (shouldFetch) {
                const response = await fetch('/searchIndex.json?v={{meta.buildDate|isoDate}}');
                window.docs = await response.json();
                window.index = createIndex(window.docs);
                localStorage.setItem("searchIndex", JSON.stringify({
                    date: searchIndexDate,
                    docs: window.docs
                }));
            }
        } catch (error) {
            console.error('Search initialization failed:', error);
            return;
        }

        // Event listeners and rest of the code
        document.addEventListener('keydown', (e) => {
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                toggleSearch();
            }
            // ... rest of key handler remains same
        });

        field = document.querySelector('#term');
        resultsDiv = document.querySelector('#search-results');

        field.addEventListener('keydown', (e) => {
            if (e.key !== 'ArrowDown' && e.key !== 'ArrowUp') {
                debounce(search, 200, false)();
            }
        });

        const params = new URLSearchParams(window.location.search);
        if (params.has('q')) {
            field.value = params.get('q');
            if (window.index && window.docs) { // Ensure index is ready
                toggleSearch();
                search();
            }
        }
    }

    // Added HTML escaping for security
    function escapeHTML(unsafe) {
        return unsafe?.replace(/[&<"'>]/g, match => ({
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;'
        }[match])) || '';
    }

    function truncate(str, size) {
        const clean = str.replace(/<[^>]*>/g, '');
        return clean.length <= size ? clean : clean.slice(0, size - 3) + '...';
    }

    window.search = function () {
        const searchTerm = (field.value || '').trim();
        if (!searchTerm || searchTerm === window.lastSearch) return;
        window.lastSearch = searchTerm;

        resultsDiv.innerHTML = loadingSvg;
        
        // Added requestAnimationFrame to prevent race condition
        requestAnimationFrame(() => {
            const results = offlineSearch(searchTerm);
            if (!results.length) {
                resultsDiv.innerHTML = `<p>No results for "${escapeHTML(searchTerm)}"</p>`;
                return;
            }

            const resultsHTML = results.map(r => {
                const title = escapeHTML(r.title);
                const content = escapeHTML(truncate(r.content, 400));
                const url = escapeHTML(r.url);
                
                const tags = (r.tags || [])
                    .filter(t => !['gardenEntry', 'note'].includes(t))
                    .map(t => `<a class="tag" href="javascript:void(0);" onclick="toggleTagSearch(this)">#${escapeHTML(t)}</a>`)
                    .join('');

                return `<div class="searchresult">
                    <a class="search-link" href="${url}">${title}</a>
                    <div onclick="window.location='${url}'">
                        ${tags ? `<div class="header-meta"><div class="header-tags">${tags}</div></div>` : ''}
                        <div class="search-content">${content}</div>
                    </div>
                </div>`;
            }).join('');

            resultsDiv.innerHTML = `<div style="max-width:100%">${resultsHTML}</div>`;
        });
    }

    function offlineSearch(searchQuery) {
        if (!window.index || !window.docs) return [];
        
        const isTagSearch = searchQuery.startsWith('#');
        const query = isTagSearch ? searchQuery.slice(1) : searchQuery;
        
        const results = window.index.search(query, {
            [isTagSearch ? 'tags' : 'title']: { limit: 5 },
            content: { limit: 10, enrich: true }
        });

        const uniqueIds = new Set(
            results.flatMap(r => r.result.map(entry => entry.id))
        );
        
        return Array.from(uniqueIds)
            .map(id => ({
                ...window.docs[id],
                content: truncate(window.docs[id].content, 400)
            }))
            .filter(r => r.tags);
    }
</script>
