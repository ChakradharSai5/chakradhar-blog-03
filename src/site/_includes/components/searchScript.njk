<script src="https://cdn.jsdelivr.net/npm/flexsearch@0.7.21/dist/flexsearch.bundle.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', init, false);
    document.addEventListener('DOMContentLoaded', setCorrectShortcut, false);

    window.toggleSearch = function () {
        const searchEl = document.getElementById('globalsearch');
        searchEl.classList.toggle('active');
        if (searchEl.classList.contains('active')) {
            document.getElementById('term').focus();
        }
    }

    window.toggleTagSearch = function (evt) {
        const term = evt.textContent;
        if (term) {
            document.getElementById('term').value = term.trim();
            window.toggleSearch();
            window.search();
        }
    }

    const loadingSvg = `...`; // Keep your original loading SVG here

    function debounce(func, wait, immediate) {
        let timeout;
        return function () {
            const context = this, args = arguments;
            const later = function () {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            const callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    }

    function setCorrectShortcut() {
        if (navigator.platform.toUpperCase().includes('MAC')) {
            document.querySelectorAll(".search-keys").forEach(x => x.textContent = "âŒ˜ + K");
        }
    }

    function createIndex(posts) {
        const index = new FlexSearch.Document({
            document: {
                id: "id",
                index: [
                    { field: "content", tokenize: "reverse" },
                    { field: "title", tokenize: "forward" },
                    { field: "tags", tokenize: "forward" }
                ]
            }
        });
        posts.forEach((p, id) => index.add({ id, ...p }));
        return index;
    }

    async function init() {
        try {
            const searchIndexDate = '{{meta.buildDate|isoDate}}';
            let docs;
            
            // Try loading from cache
            const cached = localStorage.getItem("searchIndex");
            if (cached) {
                const { date, data } = JSON.parse(cached);
                if (date === searchIndexDate) {
                    docs = data;
                    window.docs = docs;
                    window.index = createIndex(docs);
                }
            }
            
            // Fetch fresh if needed
            if (!docs) {
                const response = await fetch('/searchIndex.json?v=' + searchIndexDate);
                docs = await response.json();
                localStorage.setItem("searchIndex", JSON.stringify({
                    date: searchIndexDate,
                    data: docs
                }));
                window.docs = docs;
                window.index = createIndex(docs);
            }

            // Setup search field
            const field = document.getElementById('term');
            const resultsDiv = document.getElementById('search-results');
            
            field.addEventListener('input', debounce(() => {
                if (field.value.trim()) window.search();
            }, 200));

            // Handle initial search query
            const urlParams = new URLSearchParams(window.location.search);
            const initialQuery = urlParams.get('q');
            if (initialQuery) {
                field.value = initialQuery;
                window.toggleSearch();
                window.search();
            }
            
        } catch (error) {
            console.error('Search initialization failed:', error);
        }
    }

    window.search = function () {
        const term = document.getElementById('term').value.trim();
        if (!term || term === window.lastSearch) return;
        window.lastSearch = term;
        
        const resultsDiv = document.getElementById('search-results');
        resultsDiv.innerHTML = loadingSvg;
        
        // Simple search execution
        const results = window.index.search(term, {
            field: "title",
            limit: 20,
            suggest: true
        }).concat(window.index.search(term, {
            field: "content",
            limit: 20,
            suggest: true
        }));
        
        const uniqueResults = [...new Set(results.flatMap(r => r.result))];
        const items = uniqueResults.map(id => window.docs[id]);
        
        resultsDiv.innerHTML = items.length 
            ? items.map(item => `
                <div class="searchresult">
                    <a class="search-link" href="${item.url}">${item.title}</a>
                    <div>${truncate(item.content, 200)}</div>
                    ${item.tags?.length ? `<div class="tags">${
                        item.tags.map(tag => `<span class="tag">#${tag}</span>`).join('')
                    }</div>` : ''}
                </div>`
            ).join('') 
            : `<p>No results for "${term}"</p>`;
    }

    function truncate(str, size) {
        return str.length > size ? str.substring(0, size) + '...' : str;
    }
</script>
