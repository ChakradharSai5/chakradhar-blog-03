<script src="https://cdn.jsdelivr.net/npm/flexsearch@0.7.21/dist/flexsearch.bundle.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function () {
    setCorrectShortcut();
    init();
}, false);

function setCorrectShortcut() {
    if (navigator.platform.toUpperCase().includes('MAC')) {
        document.querySelectorAll(".search-keys").forEach(x => x.innerHTML = "âŒ˜ + K");
    }
}

function debounce(func, wait, immediate) {
    let timeout;
    return function () {
        const context = this, args = arguments;
        const later = function () {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };
        const callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
    };
}

const loadingSvg = `... your SVG ...`;

function createIndex(posts) {
    const encoder = (str) => str.toLowerCase().split(/([^a-z]|[^\x00-\x7F])/);
    const contentIndex = new FlexSearch.Document({
        cache: true,
        charset: "latin:extra",
        optimize: true,
        index: [
            { field: "content", tokenize: "reverse", encode: encoder },
            { field: "title", tokenize: "forward", encode: encoder },
            { field: "tags", tokenize: "forward", encode: encoder }
        ]
    });
    posts.forEach((p, idx) => {
        contentIndex.add({ id: idx, title: p.title, content: p.content, tags: p.tags });
    });
    return contentIndex;
}

let field;
let resultsDiv;

async function init() {
    const searchIndexDate = '{{meta.buildDate|isoDate}}'; // make sure this renders
    let shouldFetch = true;
    
    if (localStorage.getItem("searchIndex")) {
        const { date, docs } = JSON.parse(localStorage.getItem('searchIndex'));
        if (date === searchIndexDate) {
            shouldFetch = false;
            window.index = createIndex(docs);
            window.docs = docs;
        }
    }
    
    if (shouldFetch) {
        const res = await fetch('/searchIndex.json?v={{meta.buildDate|isoDate}}');
        const docs = await res.json();
        window.index = createIndex(docs);
        window.docs = docs;
        localStorage.setItem("searchIndex", JSON.stringify({ date: searchIndexDate, docs }));
    }

    document.addEventListener('keydown', handleKeyboardShortcuts);

    field = document.querySelector('#term');
    resultsDiv = document.querySelector('#search-results');

    const debouncedSearch = debounce(search, 200, false);
    field.addEventListener('keydown', (e) => {
        if (e.key !== 'ArrowDown' && e.key !== 'ArrowUp') {
            debouncedSearch();
        }
    });

    const params = new URLSearchParams(location.search);
    if (params.get('q')) {
        field.value = params.get('q');
        toggleSearch();
        search();
    }
}

function handleKeyboardShortcuts(e) {
    if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault();
        toggleSearch();
    }
    if (e.key === 'Escape') {
        document.getElementById('globalsearch').classList.remove('active');
    }
    if (document.getElementById('globalsearch').classList.contains('active')) {
        handleArrowNavigation(e);
    }
}

function handleArrowNavigation(e) {
    const active = document.querySelector('.searchresult.active');
    if (e.key === 'ArrowDown') {
        e.preventDefault();
        if (active) {
            active.classList.remove('active');
            (active.nextElementSibling || document.querySelector('.searchresult')).classList.add('active');
        } else {
            document.querySelector('.searchresult')?.classList.add('active');
        }
        document.querySelector('.searchresult.active')?.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
    if (e.key === 'ArrowUp') {
        e.preventDefault();
        if (active) {
            active.classList.remove('active');
            (active.previousElementSibling || document.querySelector('.searchresult:last-child')).classList.add('active');
        }
        document.querySelector('.searchresult.active')?.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
    if (e.key === 'Enter' && active) {
        e.preventDefault();
        window.location.href = active.querySelector('a').href;
    }
}

window.toggleSearch = function () {
    const modal = document.getElementById('globalsearch');
    modal.classList.toggle('active');
    if (modal.classList.contains('active')) {
        document.getElementById('term').focus();
    }
};

window.toggleTagSearch = function (evt) {
    const term = evt.textContent.trim();
    if (term) {
        document.getElementById('term').value = term;
        toggleSearch();
        search();
    }
};

window.lastSearch = '';

async function search() {
    const searchTerm = field.value.trim();
    if (!searchTerm || searchTerm === window.lastSearch) return;

    window.lastSearch = searchTerm;
    resultsDiv.innerHTML = loadingSvg;

    const results = offlineSearch(searchTerm);

    if (!results.length) {
        resultsDiv.innerHTML = `<p>No results for "${searchTerm}"</p>`;
        return;
    }

    let resultsHTML = '<div style="max-width:100%;">';
    results.forEach(r => {
        resultsHTML += `
            <div class="searchresult">
                <a class="search-link" href="${r.url}">${r.title}</a>
                <div onclick="window.location='${r.url}'">
                    <div class="header-meta">
                        <div class="header-tags">
                            ${(r.tags || []).map(tag => `<a class="tag" href="JavaScript:void(0);">#${tag}</a>`).join("")}
                        </div>
                    </div>
                    ${r.content}
                </div>
            </div>
        `;
    });
    resultsHTML += '</div>';
    resultsDiv.innerHTML = resultsHTML;
}

function offlineSearch(term) {
    if (!window.index || !window.docs) return [];
    const refs = window.index.search(term, { enrich: true });
    const flatRefs = refs.flatMap(r => r.result);
    return flatRefs.map(id => window.docs[id]);
}
</script>
